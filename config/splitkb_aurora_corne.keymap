/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "Default";
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | L_N | SPC |   | ENT | L_S  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y   &kp U &kp I     &kp O   &kp P    &kp BSPC
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H   &kp J &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N   &kp M &kp COMMA &kp DOT &kp FSLH &kp ESC
                  &kp LGUI &mo 1 &kp SPACE   &kp RET &mo 2 &kp LALT
                        >;
                };

                number_layer {
                        label = "Number";
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0   | BKSP |
// | CTRL |     |     |     |     |     |   | PUP | HOM |  UP | END |  .   |      |
// | SHFT |     |     |     |     | L_F |   | PDN | LFT | DWN | RGT | RALT |      |
//                    | GUI |     | SPC |   | ENT | L_P | ALT |
                        bindings = <
   &kp TAB   &kp N1 &kp N2 &kp N3 &kp N4 &kp N5   &kp N6    &kp N7   &kp N8   &kp N9    &kp N0   &kp BSPC
   &kp LCTRL &none  &none  &none  &none  &none    &kp PG_UP &kp HOME &kp UP   &kp END   &kp DOT  &none
   &kp LSHFT &none  &none  &none  &none  &mo 4    &kp PG_DN &kp LEFT &kp DOWN &kp RIGHT &kp RALT &kp ESC
                     &kp LGUI &trans &kp SPACE    &kp RET   &trans   &kp RALT
                        >;
                };

                symbol_layer {
                        label = "Symbol";
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | DEL |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `  |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~  |
//                    | GUI | L_P | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp TAB   &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp DEL
   &kp LCTRL &none    &none  &none    &none    &none       &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp NUHS &kp GRAVE
   &kp LSHFT &kp NUBS &none  &none    &none    &none       &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp LALT
                        >;
                };

                numpad_layer {
                        label = "Numpad";
// -----------------------------------------------------------------------------------------
// |  TAB | BCL | PRV | PPS | NXT | VUP |   |     |  7  |  8  |  9  | NLCK | BKSP |
// | CTRL | BT0 | BT1 | BT2 | BT3 | VDN |   |     |  4  |  5  |  6  |   +  |   -  |
// | SHFT | USB | BLE |     |     | MUT |   |  0  |  1  |  2  |  3  |   *  |   /  |
//                    |     |     | SPC |   | ENT |     | ALT |

                        bindings = <
   &kp TAB   &bt BT_CLR   &kp C_PREV   &kp C_PP     &kp C_NEXT   &kp C_VOL_UP   &kp LA(F4) &kp KP_N7  &kp KP_N8 &kp KP_N9 &kp KP_NUM      &kp BSPC
   &kp LCTRL &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &kp C_VOL_DN   &none      &kp KP_N4  &kp KP_N5 &kp KP_N6 &kp KP_PLUS     &kp KP_MINUS
   &kp LSHFT &out OUT_USB &out OUT_BLE &none        &none        &kp C_MUTE     &kp KP_N0  &kp KP_N1  &kp KP_N2 &kp KP_N3 &kp KP_MULTIPLY &kp KP_DIVIDE
                                       &kp LGUI     &trans       &kp SPACE      &kp RET    &trans     &kp LALT
                        >;
                };

                function_layer {
                        label = "Function";
// -----------------------------------------------------------------------------------------
// |      | F9  | F10 | F11 | F12 |     |   |     |      |     |      |     |     |
// | CTRL | F5  | F6  | F7  | F8  |     |   |     | CTRL | ALT | SHFT | GUI |     |
// | SHFT | F1  | F2  | F3  | F4  |     |   |     |      |     |      |     |     |
//                    | GUI |     | SPC |   | ENT |      | ALT |

                        bindings = <
   &none     &kp F9  &kp F10 &kp F11 &kp F12 &none      &none   &none     &none    &none     &none    &none
   &kp LCTRL &kp F5  &kp F6  &kp F7  &kp F8  &none      &none   &kp LCTRL &kp LALT &kp LSHFT &kp LGUI &none
   &kp LSHFT &kp F1  &kp F2  &kp F3  &kp F4  &mo 4      &none   &none     &none    &none     &none    &none
                            &kp LGUI &trans  &kp SPACE  &kp RET &trans    &kp LALT
                        >;
                };
        };
};
